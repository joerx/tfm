#!/bin/bash

# Terraform Version Manager

set -e -o pipefail

TFM_PREFIX=${TFM_PREFIX:-"$HOME/.local/bin"}
TFM_DIR=${TFM_DIR:-"$HOME/.tfm"}

function printenv() {
    echo "TFM_PREFIX: $TFM_PREFIX"
    echo "TFM_DIR: $TFM_DIR"
    echo "TFM_OS: $TFM_OS"
}

function list() {
    echo "Versions:"
    list_versions
    echo
    echo "Aliases:"
    list_aliases
    echo
}

function get_arch() {
    local os
    local arch

    case "$OSTYPE" in
        linux-gnu*)
            os=linux
            ;;
        darwin*)
            os=darwin
            ;;
        *)
            >&2 echo "Unsupported \$OSTYPE: '$OSTYPE'"
            return 1
    esac

    arch=$(uname -m)
    case "${arch}" in
        x86_64)
            arch=amd64
            ;;
        *)
            >&2 echo "Unsupported architecture: '$arch"
            return 1        
    esac

    echo "${os}_${arch}"
}

function list_versions() {
    mkdir -p $TFM_DIR/versions

    local versions=$(ls -l1 $TFM_DIR/versions)
    local current=$(current)

    
    for v in $versions; do
        if [[ "$v" == "$current" ]]; then
            echo "* $v"
        else
            echo "  $v"
        fi
    done
}

function list_aliases() {
    mkdir -p $TFM_DIR/aliases

    local aliases=$(ls -l1 $TFM_DIR/aliases)

    for a in $aliases; do
        local target=$(_readlink $TFM_DIR/aliases/$a)
        echo "  $a = $target"
    done
}

function _readlink() {
    readlink ${1} | sed "s@^$TFM_DIR/versions/@@" | sed 's@/terraform$@@'
}

function _unlink() {
    local link=${1}
    if [[ -L $link ]]; then
        unlink $link
    fi
    if [[ -e $link ]]; then
        echo "Failed to remove existing symlink $link or is not a symlink"
        exit 1
    fi
}

function set_alias() {
    local version=$1
    local alias=$2

    if [[ -z "$version" ]]; then
        echo "Usage: tfm alias <version> <alias>"
        exit 1
    fi
    if [[ -z "$alias" ]]; then
        echo "tfm alias <version> <alias>"
        exit 1
    fi
    if [[ ! -f "$TFM_DIR/versions/$version/terraform" ]]; then
        echo "Terraform $version is not installed, run '$0 install $version' to install it."
        echo
        echo "Installed versions:"
        list_versions
        exit 1
    fi

    mkdir -p $TFM_DIR/aliases

    _unlink $TFM_DIR/aliases/$alias 
    _unlink $TFM_PREFIX/$alias

    ln -s $TFM_DIR/versions/$version/terraform $TFM_DIR/aliases/$alias
    ln -s $TFM_DIR/aliases/$alias $TFM_PREFIX/$alias

    echo "Aliased terraform version ${version} to ${alias}"
}

function link() {
    local version=$1
    set_alias $1 terraform
    echo "Current terraform version is $(current)"
}

function current() {
    _readlink $TFM_DIR/aliases/terraform
}

function install() {
    local version=$1
    local arch=$(get_arch)

    echo "Installing Terraform ${version} for $arch"

    if [[ -z "$version" ]]; then
        echo "Missing target version for installation"
        exit 1
    fi

    curl -fO https://releases.hashicorp.com/terraform/${version}/terraform_${version}_${arch}.zip
    mkdir -p $TFM_DIR/versions/$version
    unzip terraform_${version}_${arch}.zip -d $TFM_DIR/versions/$version/
    rm terraform_${version}_${arch}.zip
}

function list_remote() {
    curl -sS -f https://releases.hashicorp.com/terraform/ | grep "href=\"/terraform" | sed 's@.*terraform_\([0-9]\{1,\}.[0-9]\{1,\}.[0-9]\{1,\}.*\)<.*@\1@'
}

function usage() {
    cat << EOF 
Usage: tfm <subcommand> [args]

  Terraform version manager. Easily install and switch between multiple terraform versions. 
  Supports aliasing to use versions in parallel. Uses symlinks, so no bash-shims are needed.

  Made from 100% organic, gluten free, non-GMO bash code.

Subcommands:
    versions                    List available versions and aliases
    version                     Show currently active version
    use <version>               Select <version> as the currently active version
    alias <version> <name>      Set a named alias for <version> in your \$PATH
    install <version>           Install version from releases.hashicorp.com
    list-remote                 List available versions on releases.hashicorp.com
    printenv                    Print environment settings used by tfenv
EOF
}

case $1 in
    versions|list)
        list
        ;;
    version|current)
        current
        ;;
    use)
        link $2
        ;;
    install)
        install $2
        ;;
    alias)
        set_alias $2 $3
        ;;
    printenv)
        printenv
        ;;
    list-remote)
        list_remote
        ;;
    *)
        usage
        ;;
esac
