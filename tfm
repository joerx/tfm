#!/bin/bash

# Terraform Version Manager

set -e

TFM_PREFIX=${TFM_PREFIX:-"~/.opt/bin"}
TFM_DIR=${TFM_DIR:-"~/.tfm"}
TFM_OS=${TFM_OS:-"darwin_amd64"}

function printenv() {
    echo "TFM_PREFIX: $TFM_PREFIX"
    echo "TFM_DIR: $TFM_DIR"
    echo "TFM_OS: $TFM_OS"
}

function list() {
    local versions=$(ls -l1 $TFM_DIR)
    local current=$(current)
    
    for v in $versions; do
        if [[ "$v" == "$current" ]]; then
            echo "* $v"
        else
            echo "  $v"
        fi
    done
}

function link() {
    local version=$1

    if [[ -z "$version" ]]; then
        echo "Missing version version for linking"
        exit 1
    fi
    if [[ ! -f "$TFM_DIR/$version/terraform" ]]; then
        echo "Version terraform-$version is not installed, run '$0 install $version' to install it"
        exit 1
    fi

    if [[ -L $TFM_PREFIX/terraform ]]; then
        unlink $TFM_PREFIX/terraform
    fi
    if [[ -e $TFM_PREFIX/terraform ]]; then
        echo "Failed to remove existing symlink $TFM_PREFIX/terraform or is not a symlink"
        exit 1
    fi

    ln -s $TFM_DIR/$version/terraform $TFM_PREFIX/terraform

    echo "Done, current terraform version is $(current)"
}

function current() {
    readlink $TFM_PREFIX/terraform | sed "s@$TFM_DIR/@@" | awk -F'/' '{ print $1 }'
}

function usage() {
    echo "$0 versions|version|use <version>|install <version>"
}

function install() {
    local version=$1
    if [[ -z "$version" ]]; then
        echo "Missing target version for installation"
        exit 1
    fi

    curl -fO https://releases.hashicorp.com/terraform/${version}/terraform_${version}_${TFM_OS}.zip
    mkdir -p $TFM_DIR/$version
    unzip terraform_${version}_${TFM_OS}.zip -d $TFM_DIR/$version/
    rm terraform_${version}_${TFM_OS}.zip
}

case $1 in
    "versions")
        list
        ;;
    "version")
        current
        ;;
    "use")
        link $2
        ;;
    "install")
        install $2
        ;;
    "printenv")
        printenv
        ;;
    *)
        usage
        ;;
esac
